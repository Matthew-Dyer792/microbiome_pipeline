// Global default params, used in configs
params {

    // Input options
    input                      = null
    single_end                 = false
    ont_long_reads             = false
    target_index               = null
    filter_index               = null
    workflow                   = null

    // minimap2 options
    bam_format                 = true
    cigar_paf_format           = false
    cigar_bam                  = false

    // samtools options
    fastq_interleave           = false
    view_qname                 = []

    // multiqc options
    multiqc_config             = []
    extra_multiqc_config       = []
    multiqc_logo               = []

    // metascope
    ncbi_key                   = []

    // Boilerplate options
    outdir                     = './results'
    publish_dir_mode           = 'copy'
    conda_cacheDir             = []

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '60.GB'
    max_cpus                   = 30
    max_time                   = '240.h'

}

// import statement for execution profiles
profiles {
    chia         { includeConfig 'conf/chia.config'     }
    chia_vm      { includeConfig 'conf/chia_vm.config'  }
    server       { includeConfig 'conf/server.config'   }
    ont          { includeConfig 'conf/ont.config'      }
    conda {
        conda.enabled           = true
        singularity.enabled     = false
    }
    singularity {
        conda.enabled           = false
        singularity.enabled     = true
        singularity.autoMounts  = true
    }
}

//
// Generic process options for all workflows
//
process {

    publishDir = [
        path: { "${params.outdir}/${meta.id}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
    ]

    errorStrategy = { task.attempt <= 3 ? 'retry' : 'finish' }
    maxRetries = 3

}

//
//  Process options for the setup workflow
//
if (params.workflow == 'setup') {

    process {
        executor = 'local'
        cpus = 1
        memory = 2.GB
    }

}

//
//  Process options for the ont_long_reads workflow
//
if (params.workflow == 'ont_long_reads') {

    process {

        withName: MINIMAP2_ALIGN {
            ext.prefix = { "${meta.id}_${meta.index_prefix}.target" }
            ext.args = { [
                "--split-prefix ${meta.id}_${meta.index_prefix}"
            ].join(' ') }
        }

        withName: BAM_TO_FASTQ {
            ext.prefix = { "${meta.id}_${meta.index_prefix}" }
            ext.args = { [ "-F 4" ].join(' ') }
        }

        withName: MINIMAP2_FILTER {
            ext.prefix = { "${meta.id}_${meta.target_index_prefix}_${meta.index_prefix}.filter" }
        }

        withName: TARGET_QNAMES {
            ext.prefix = { "${meta.id}_${meta.index_prefix}.target_qnames" }
            ext.args = { [ "-F 4" ].join(' ') }
        }

        withName: FILTER_QNAMES {
            ext.prefix = { "${meta.id}_${meta.target_index_prefix}_${meta.index_prefix}.filter_qnames" }
            ext.args = { [ "-F 4" ].join(' ') }
        }

        withName: MERGE_TARGET_QNAMES {
            ext.prefix = { "${meta.id}_merged.target_qnames" } 
        }

        withName: MERGE_FILTER_QNAMES {
            ext.prefix = { "${meta.id}_merged.filter_qnames" } 
        }

        withName: FILTER_BAM {
            ext.prefix = { "${meta.id}_${meta.index_prefix}" }
        }

        withName: MULTIQC {
            publishDir       = [
                path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
                mode: params.publish_dir_mode,
            ]
        }

    }

}

//
//  Process options for the subworkflow
//
includeConfig 'conf/modules/bam_stats_samtools.config'
includeConfig 'conf/modules/bam_markduplicates_picard.config'

//
//  Process options for short read files
//
if (params.workflow == 'short_reads') {

    process {

        withName: METASCOPE_ALIGN {
            ext.prefix = { "${meta.id}_${meta.index_prefix}.target" } 
        }

    }

}

//
//  Universal Processes for mircobiome_pipeline
//
if (params.workflow != 'setup') {

    process {

        withName: SAMTOOLS_MERGE {
            ext.prefix = { "${meta.id}_merged" } 
        }

        withName: METASCOPE_ID {
            executor = 'local'
        }

        withName: METASCOPE_TO_KRONA {
            executor = 'local'
        }

    }

}

manifest {
    name            = 'Matthew-Dyer792/microbiome_pipeline'
    author          = """Matthew Dyer"""
    homePage        = 'https://github.com/Matthew-Dyer792/microbiome_pipeline'
    description     = """analysis pipeline for interrogating the mcirobiome make up of a sequenced sample"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.1'
    version         = '4.0'
}
