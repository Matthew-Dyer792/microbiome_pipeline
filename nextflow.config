// Global default params, used in configs
params {

    // Input options
    input                      = null
    single_end                 = false
    ont_long_reads             = false
    target_index               = null
    filter_index               = null
    workflow                   = null

    // Boilerplate options
    outdir                     = './results'
    publish_dir_mode           = 'copy'

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '60.GB'
    max_cpus                   = 30
    max_time                   = '240.h'

}

// import statement for execution profiles
profiles {
    chia         { includeConfig 'conf/chia.config'     }
    server       { includeConfig 'conf/server.config'   }
    ont          { includeConfig 'conf/ont.config'      }
    conda {
        params.enable_conda = true
        singularity.enabled = false
    }
    singularity {
        params.enable_conda = false
        singularity.enabled = true
        singularity.autoMounts = true
    }
}

//
// Generic process options for all workflows
//
process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
    ]

    errorStrategy = { task.attempt <= 3 ? 'retry' : 'finish' }
    maxRetries = 3

}

//
//  Process options for the ont_long_reads workflow
//
if (params.workflow == 'ont_long_reads') {

    process {

        withName: MINIMAP2_ALIGN {
            ext.prefix = { "${meta.id}_${meta.index_prefix}.target" }
            ext.args = { [
                "--split-prefix ${meta.id}_${meta.index_prefix}"
            ].join(' ') }
            ext.args2 = [
                "-F 4"
            ].join(' ')
        }

        withName: MINIMAP2_FILTER {
            // ext.prefix = { "${meta.id}_${meta.target_index_prefix}_${meta.index_prefix}.filter" } // this is to allow merging on different named files
            ext.prefix = { "${meta.id}_${meta.index_prefix}.filter" }
            ext.args2 = [
                "-F 4"
            ].join(' ')
        }

        withName: TARGET_QNAMES {
            ext.prefix = { "${meta.id}_${meta.index_prefix}" }
            ext.args = [
                "-F 4"
            ].join(' ')
        }

        withName: MERGE_TARGET_QNAMES {
            ext.prefix = { "${meta.id}_merged.target_qnames" } 
        }

        withName: MERGE_FILTER_QNAMES {
            ext.prefix = { "${meta.id}_merged.filter_qnames" } 
        }

        withName: FILTER_BAM {
            ext.prefix = { "${meta.id}_${meta.index_prefix}" }
        }

    }

}

//
//  Process options for short read files
//
if (params.workflow == 'short_reads') {

    process {

        withName: METASCOPE_ALIGN {
            ext.prefix = { "${meta.id}_${meta.index_prefix}.target" } 
        }

    }
}

//
//  Universal Processes for mircobiome_pipeline
//
process {

    withName: SAMTOOLS_MERGE {
        ext.prefix = { "${meta.id}_merged" } 
    }

    /*
    withName: METASCOPE_ID {
        executor = 'local'
    }

    withName: METASCOPE_TO_KRONA {
        executor = 'local'
    }
    */

}

/*
process {

    withName: BAM_TO_FASTQ {
        ext.prefix = { "${meta.id}_${meta.index_prefix}" }
    }


}
*/

manifest {
    name            = 'Matthew-Dyer792/microbiome_pipeline'
    author          = """Matthew Dyer"""
    homePage        = 'https://github.com/Matthew-Dyer792/microbiome_pipeline'
    description     = """analysis pipeline for interrogating the mcirobiome make up of a sequenced sample"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.6'
    version         = '3.1'
}
